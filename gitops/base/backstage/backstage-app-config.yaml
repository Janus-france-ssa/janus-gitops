apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: backstage
data:
  app-config.yaml: |-
    app:
      title: RedHat Backstage App
      baseUrl: http://backstage-service.backstage.svc.cluster.local

    organization:
      name: My Company

    backend:
      # Used for enabling authentication, secret is shared by all backend plugins
      # See https://backstage.io/docs/auth/service-to-service-auth for
      # information on the format
      # auth:
      #   keys:
      #     - secret: ${BACKEND_SECRET}
      baseUrl: http://backstage-service.backstage.svc.cluster.local
      listen:
        port: 7007
        # Uncomment the following host directive to bind to specific interfaces
        # host: 127.0.0.1
      csp:
        connect-src: ["'self'", 'http:', 'https:']
        # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
        # Default Helmet Content-Security-Policy values can be removed by setting the key to false
      cors:
        origin: http://backstage-service.backstage.svc.cluster.local
        methods: [GET, POST, PUT, DELETE]
        credentials: true
      # This is for local development only, it is not recommended to use this in production
      # The production database configuration is stored in app-config.production.yaml
      database:
        client: pg
        connection:
          host: postgres-service.backstage.svc.cluster.local
          port: 5432
            #user: ${POSTGRES_USER}
          user: feven
            #password: ${POSTGRES_PASSWORD}
          password: redhat
      cache:
        store: memory
      # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

    integrations:
      github:
        - host: github.com
          # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
          # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
          token: ${GITHUB_TOKEN}
        ### Example for how to add your GitHub Enterprise instance using the API:
        # - host: ghe.example.net
        #   apiBaseUrl: https://ghe.example.net/api/v3
        #   token: ${GHE_TOKEN}

    proxy:
      #'/argocd/api':
      #  target: https://openshift-gitops-server.openshift-gitops.svc.cluster.local/api/v1/
      #  changeOrigin: true
      #  # only if your argocd api has self-signed cert
      #  secure: false
      #  headers:
      #    Cookie:
      #      $env: ARGOCD_AUTH_TOKEN    
      ### Example for how to add a proxy endpoint for the frontend.
      ### A typical reason to do this is to handle HTTPS and CORS for internal services.
      # '/test':
      #   target: 'https://example.com'
      #   changeOrigin: true

    # Reference documentation http://backstage.io/docs/features/techdocs/configuration
    # Note: After experimenting with basic setup, use CI/CD to generate docs
    # and an external cloud storage when deploying TechDocs for production use-case.
    # https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
    techdocs:
      builder: 'local' # Alternatives - 'external'
      generator:
        runIn: 'docker' # Alternatives - 'local'
      publisher:
        type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

    auth:
      # see https://backstage.io/docs/auth/ to learn about auth providers
      providers: 
        #oauth2Proxy: {}

    argocd:
      username: cluster-admin
      password: bwrvx-a6xKU-rw2ih-GrncY
      appLocatorMethods:
        - type: 'config'
          instances:
            - name: argoInstance1
              url: https://openshift-gitops-server.openshift-gitops.svc.cluster.local


    scaffolder:
      # see https://backstage.io/docs/features/software-templates/configuration for software template options

    catalog:
      providers:
        ocm:
          hub:
            name: local-rosa
            kubernetesPluginRef: local
            schedule: # optional; same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 1 }
      #providers:
      #  keycloakOrg:
      #    default:
      #      baseUrl: https://keycloak-sso.apps.rosa-neve.kset.p1.openshiftapps.com/auth
      #      loginRealm: basic
      #      realm: basic
      #      clientId: client-secret
      #      clientSecret: client-secret
      #      schedule: # optional; same options as in TaskScheduleDefinition
      #        frequency: { minutes: 1 }
      #        timeout: { minutes: 1 }
      #        initialDelay: { seconds: 15 }
      #import:
      #  entityFilename: catalog-info.yaml
      #  pullRequestBranchName: backstage-integration
      rules:
        - allow: [Component, System, API, Resource, Location, Template, User]
      locations:
        - type: url
          target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-components.yaml

      # JanusIDP Quarkus Template
        - type: url
          target: https://github.com/janus-idp/software-templates/blob/main/scaffolder-templates/quarkus-web-template/template.yaml
          rules:
            - allow: [Template]
    kubernetes:
      serviceLocatorMethod:
        type: multiTenant
      clusterLocatorMethods:
        - type: config
          clusters:
            - url: https://kubernetes.default.svc/
              name: local
              caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              authProvider: serviceAccount
              # don't specify this attribute to force lookup in pod in cluster
              # serviceAccountToken: ''
              dashboardUrl: https://console-openshift-console.apps.rosa-neve.kset.p1.openshiftapps.com ## path to update
              dashboardApp: openshift
              skipTLSVerify: false
              skipMetricsLookup: false
      customResources:
        - group: 'route.openshift.io'
          apiVersion: 'v1'
          plural: 'routes'
        - group: 'tekton.dev'
          apiVersion: 'v1beta1'
          plural: 'pipelineruns'
        - group: 'tekton.dev'
          apiVersion: 'v1beta1'
          plural: 'taskruns'

